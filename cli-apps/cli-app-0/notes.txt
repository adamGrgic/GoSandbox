NOTES

Creating a cli application from the book
Powerful Command-Line Applications in Go: Build Fast and Maintainable Tools

Packages involved:

"bufio" - read text
"fmt" - print formatted output
"os" - operating system resources
"io" - provides io.Reader interface
"flag" - used to create and manage commandline flags

Scaners
- convenient way of reading data delimited by spaces or new lines

`go test -v`
- run tests in verbose mode


`go build`
- create executable

`GOOS=windows go build`
- set build for windows platform

`file project.exe`
- file information about the executable
- ex output: wc.exe: PE32+ executable (console) x86-64 (stripped to external PDB), for MS windows



Chapter 2
---------

Flags package 

(TODO: add notes from beginning until page 95)
...

Interfaces
*Defines what a type should do and not what type of data it should hold

A type must implement all the methods in an interface 

satisfying an interface doesn't require explicit declaration (??)
=> useful for code decoupling

type Stringer interface {
    String() string
}

It's commonn in go to use simple interfaces that define one or two methods

** prioritize interfaces as function parameters rather than types 

B. Environment Variables

-> os.Getenv("environment variable")

** can export this in ubuntu instead of usingna  .env file although seems like the .env file is best option



variadic function (?)

